% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/runs_table.R
\name{runs_table}
\alias{runs_table}
\title{Generate a table with details about executed Monolix runs}
\usage{
runs_table(
  db_conn = default_db_conn(),
  format = "gt",
  output_file = NULL,
  include_files = FALSE
)
}
\arguments{
\item{db_conn}{A database connection object inheriting from \code{DBIObject}.
Defaults to a connection created by \code{default_db_conn()}.}

\item{format}{Character scalar. Output format for the table.
Either \code{"gt"} for a formatted gt table (default) or \code{"csv"} for a data frame.}

\item{output_file}{Character scalar or \code{NULL}. File path to save output.}

\item{include_files}{Logical scalar. Whether to include details about input and
output files in the table. Default is \code{FALSE}.}
}
\value{
When \code{format = "gt"}, returns a \code{gt_tbl} object. When \code{format = "csv"}
and \code{output_file} is specified, returns the data frame invisibly after writing
to file. When \code{format = "csv"} and \code{output_file} is \code{NULL}, returns the data frame.
Returns \code{NULL} invisibly if no runs are found in the database.
}
\description{
Creates a formatted table displaying information about Monolix jobs that have
been executed and recorded in the database. The table can include basic job
information or detailed file tracking data.
}
\examples{
\dontrun{
# Table of all runs
runs_table()

# Table with input/output file information
runs_table(include_files = TRUE)

# Export to CSV
runs_table(format = "csv", output_file = "runs_summary.csv")

# Use custom database connection
conn <- DBI::dbConnect(duckdb::duckdb(), "custom.db")
runs_table(db_conn = conn)
}

}
\seealso{
\code{\link{runs_data}} for extracting the underlying data,
\code{\link{mono}} for submitting Monolix jobs and recording runs,
\code{\link{default_db_conn}} for default database connections
}
