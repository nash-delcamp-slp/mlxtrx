% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mono.R
\name{mono}
\alias{mono}
\title{Submit Monolix jobs to grid and record runs in database}
\usage{
mono(
  path,
  output_dir = NULL,
  thread = NULL,
  tool = NULL,
  mode = NULL,
  config = NULL,
  cmd = "mono24",
  db_conn = default_db_conn(db = default_db(path))
)
}
\arguments{
\item{path}{Character vector. Paths to existing Monolix project files.}

\item{output_dir}{Character vector or \code{NULL}. Directory for output files.
Passed as \code{--output-dir} argument to the Monolix command.
If \code{NULL} (default), Monolix uses the export path from the project file.
Should be same length as \code{path}, length 1, or \code{NULL}.}

\item{thread}{Integer vector or \code{NULL}. Number of threads used by Monolix.
Passed as \code{--thread} argument to the Monolix command.
Should be same length as \code{path}, length 1, or \code{NULL}.}

\item{tool}{Character vector or \code{NULL}. Tool to launch assessment
(\code{"monolix"}, \code{"modelBuilding"}, \code{"bootstrap"}).
Passed as \code{--tool} argument to the Monolix command.
If \code{NULL} (default), Monolix uses \code{"monolix"}.
Should be same length as \code{path}, length 1, or \code{NULL}.}

\item{mode}{Character vector or \code{NULL}. Console mode
(\code{"none"}, \code{"basic"}, or \code{"complete"}).
Passed as \code{--mode} argument to the Monolix command.
If \code{NULL} (default), Monolix uses \code{"basic"}.
Should be same length as \code{path}, length 1, or \code{NULL}.}

\item{config}{Character vector or \code{NULL}. Configuration file path.
Passed as \code{--config} argument to the Monolix command.
Should be same length as \code{path}, length 1, or \code{NULL}.}

\item{cmd}{Character vector. The Monolix command to execute. Must be
identifiable by \code{Sys.which()} and contain "mono" in the name.
Default is "mono24". Should be same length as \code{path} or length 1.}

\item{db_conn}{A database connection object inheriting from \code{DBIObject}.
Defaults to a connection created by \code{default_db_conn()}.}
}
\value{
Logical vector. Returns \code{TRUE} for successful job submissions,
\code{NA} for jobs where ID extraction fails.
}
\description{
Executes one or more commands that submit Monolix jobs to the grid and
stores a record of the runs in a database.
}
\details{
This function performs the following operations for each job:
\enumerate{
\item Validates inputs and submits the Monolix job using \code{system2()}
\item Extracts the job ID from the submission output
\item Monitors job completion by checking the job queue
\item Records job information in the \code{mono_jobs} table
\item Tracks input file metadata in the \code{input_files} table
\item Records all output files with timestamps and checksums in the \code{output_files} table
}

The database schema includes three tables:
\itemize{
\item \code{mono_jobs}: Job metadata (ID, path, command, submission time)
\item \code{input_files}: Input file tracking with timestamps and MD5 checksums
\item \code{output_files}: Output file tracking with timestamps and MD5 checksums
}

The function automatically creates database tables if they don't exist and
closes the database connection on exit.
}
\examples{
\dontrun{
# Basic usage with default settings
mono("path/to/project.mlxtran")

# Multiple jobs
mono(c("project1.mlxtran", "project2.mlxtran"))

# Specify custom output directory and thread count
mono(
  path = "project.mlxtran",
  output_dir = "/custom/output/path",
  thread = 4
)

# Use custom database connection
conn <- DBI::dbConnect(duckdb::duckdb(), "custom.db")
mono("project.mlxtran", db_conn = conn)
}

}
\seealso{
\code{\link{default_db_conn}} for default database connections,
\code{\link{get_job_files}} for querying recorded file information,
\code{\link{execute_job}} for executing a single job
}
